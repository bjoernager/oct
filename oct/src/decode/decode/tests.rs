// Copyright 2024-2025 Gabriel Bj√∏rnager Jensen.
//
// This Source Code Form is subject to the terms of
// the Mozilla Public License, v. 2.0. If a copy of
// the MPL was not distributed with this file, you
// can obtain one at:
// <https://mozilla.org/MPL/2.0/>.

use oct::decode::Decode;
use oct::encode::{Encode, SizedEncode};
use std::char;

macro_rules! test {
	{
		$(
			$ty:ty {
				$($data:expr => $value:expr),+$(,)?
			}$(,)?
		)*
	} => {{
		$($({
			let data: &[u8] = &$data;

			let mut input = ::oct::decode::Input::new(data);

			let left:  $ty = ::oct::decode::Decode::decode(&mut input).unwrap();
			let right: $ty = $value;

			::std::assert_eq!(left, right);
		})*)*
	}};
}

#[test]
fn test_decode() {
	test! {
		i8 {
			[0x00] =>  0x00,
			[0x7F] =>  0x7F,
			[0x80] => -0x80,
			[0xFF] => -0x01,
		}

		i16 {
			[0x00, 0x00] =>  0x0000,
			[0xFF, 0x7F] =>  0x7FFF,
			[0x00, 0x80] => -0x8000,
			[0xFF, 0xFF] => -0x0001,
		}

		i32 {
			[0x00, 0x00, 0x00, 0x00] =>  0x00000000,
			[0xFF, 0xFF, 0xFF, 0x7F] =>  0x7FFFFFFF,
			[0x00, 0x00, 0x00, 0x80] => -0x80000000,
			[0xFF, 0xFF, 0xFF, 0xFF] => -0x00000001,
		}

		i64 {
			[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] =>  0x0000000000000000,
			[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F] =>  0x7FFFFFFFFFFFFFFF,
			[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80] => -0x8000000000000000,
			[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF] => -0x0000000000000001,
		}

		u128 {
			[
				0x7F, 0x8F, 0x6F, 0x9F, 0x5F, 0xAF, 0x4F, 0xBF,
				0x3F, 0xCF, 0x2F, 0xDF, 0x1F, 0xEF, 0x0F, 0xFF,
			] => 0xFF_0F_EF_1F_DF_2F_CF_3F_BF_4F_AF_5F_9F_6F_8F_7F,
		}

		char {
			[0xFD, 0xFF, 0x00, 0x00] => char::REPLACEMENT_CHARACTER,
		}

		[char; 0x5] {
			[
				0xBB, 0x03, 0x00, 0x00, 0x91, 0x03, 0x00, 0x00,
				0xBC, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00,
				0xB1, 0x03, 0x00, 0x00,
			] => ['\u{03BB}', '\u{0391}', '\u{03BC}', '\u{0394}', '\u{03B1}'],
		}

		Option<()> {
			[0x00] => None,
			[0x01] => Some(()),
		}

		Result<(), i8> {
			[0x00, 0x00] => Ok(()),
			[0x01, 0x7F] => Err(i8::MAX),
		}

//		Lid<Vec<u16>, 0x6> {
//			[0x02, 0x00, 0xBB, 0xAA, 0xDD, 0xCC] => Lid([0xAA_BB, 0xCC_DD].into()),
//		}

//		Lid<String, 0x6> {
//			[0x06, 0x00, 0xE6, 0x97, 0xA5, 0xE6, 0x9C, 0xAC] => Lid("\u{65E5}\u{672C}".into()),
//		}
	}
}

#[test]
fn test_decode_derive() {
	#[derive(Debug, Decode, Encode, PartialEq, SizedEncode)]
	struct ProcExit {
		exit_code: i32,
		timestmap: u64,
	}

	#[derive(Debug, Decode, Encode, PartialEq, SizedEncode)]
	struct NewByte(u8);

	#[derive(Debug, Decode, Encode, PartialEq, SizedEncode)]
	struct Unit;

	#[derive(Debug, Decode, Encode, PartialEq, SizedEncode)]
	enum UnitOrFields {
		Unit,
		Unnamed(i32),
		Named { timestamp: u64 },
	}

	test! {
		ProcExit {
			[
				0x01, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x0B, 0x5E,
				0x00, 0x00, 0x00, 0x00,
			] => ProcExit { exit_code: 0x1, timestmap: 1577836800 },
		}

		NewByte {
			[0x80] => NewByte(0x80),
		}

		Unit {
			[] => Unit,
		}

		UnitOrFields {
			[
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00,
			] => UnitOrFields::Unit,

			[
				0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0x00,
			] => UnitOrFields::Unnamed(-0x1),

			[
				0x02, 0x00, 0x4C, 0xC8, 0xC5, 0x66, 0x00, 0x00,
				0x00, 0x00,
			] => UnitOrFields::Named { timestamp: 1724237900 },
		}
	}
}
